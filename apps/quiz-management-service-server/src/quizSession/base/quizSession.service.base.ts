/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, QuizSession as PrismaQuizSession } from "@prisma/client";

export class QuizSessionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuizSessionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.quizSession.count(args);
  }

  async quizSessions(
    args: Prisma.QuizSessionFindManyArgs
  ): Promise<PrismaQuizSession[]> {
    return this.prisma.quizSession.findMany(args);
  }
  async quizSession(
    args: Prisma.QuizSessionFindUniqueArgs
  ): Promise<PrismaQuizSession | null> {
    return this.prisma.quizSession.findUnique(args);
  }
  async createQuizSession(
    args: Prisma.QuizSessionCreateArgs
  ): Promise<PrismaQuizSession> {
    return this.prisma.quizSession.create(args);
  }
  async updateQuizSession(
    args: Prisma.QuizSessionUpdateArgs
  ): Promise<PrismaQuizSession> {
    return this.prisma.quizSession.update(args);
  }
  async deleteQuizSession(
    args: Prisma.QuizSessionDeleteArgs
  ): Promise<PrismaQuizSession> {
    return this.prisma.quizSession.delete(args);
  }
}
