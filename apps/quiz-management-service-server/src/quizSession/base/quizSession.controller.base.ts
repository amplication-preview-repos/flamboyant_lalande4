/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QuizSessionService } from "../quizSession.service";
import { QuizSessionCreateInput } from "./QuizSessionCreateInput";
import { QuizSession } from "./QuizSession";
import { QuizSessionFindManyArgs } from "./QuizSessionFindManyArgs";
import { QuizSessionWhereUniqueInput } from "./QuizSessionWhereUniqueInput";
import { QuizSessionUpdateInput } from "./QuizSessionUpdateInput";

export class QuizSessionControllerBase {
  constructor(protected readonly service: QuizSessionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuizSession })
  async createQuizSession(
    @common.Body() data: QuizSessionCreateInput
  ): Promise<QuizSession> {
    return await this.service.createQuizSession({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuizSession] })
  @ApiNestedQuery(QuizSessionFindManyArgs)
  async quizSessions(@common.Req() request: Request): Promise<QuizSession[]> {
    const args = plainToClass(QuizSessionFindManyArgs, request.query);
    return this.service.quizSessions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuizSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async quizSession(
    @common.Param() params: QuizSessionWhereUniqueInput
  ): Promise<QuizSession | null> {
    const result = await this.service.quizSession({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuizSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQuizSession(
    @common.Param() params: QuizSessionWhereUniqueInput,
    @common.Body() data: QuizSessionUpdateInput
  ): Promise<QuizSession | null> {
    try {
      return await this.service.updateQuizSession({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuizSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQuizSession(
    @common.Param() params: QuizSessionWhereUniqueInput
  ): Promise<QuizSession | null> {
    try {
      return await this.service.deleteQuizSession({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
